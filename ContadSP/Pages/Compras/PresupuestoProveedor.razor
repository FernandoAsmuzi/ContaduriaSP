@page "/presupuesto/{id}/{prov}"
@using ContadSP.Controllers
@using ContadSP.Repositorios
@using ContadSP.Models
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations

@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<DetalleProvision> repositorioProvisionDetalle
@inject IRepositorio<PresupuestoPedido> repositorioPresupuestoPedido
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">

                <div style="overflow: auto;">
                    <h5>Datos del proveedor</h5>
                    <div class="row">
                        <div class="col">
                            <label><strong>Proveedor:</strong></label>
                            <label>@proveedor.nombre</label>
                        </div>
                        <div class="col">
                            <label><strong>Comercio:</strong></label>
                            <label>@proveedor.nombre_comercial</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>Dirección:</strong></label>
                            <label>@proveedor.direccion</label>
                        </div>
                        <div class="col">
                            <label><strong>Teléfono:</strong></label>
                            <label>@proveedor.telefono</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>Email:</strong></label>
                            <label>@proveedor.email</label>
                        </div>
                    </div>

                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Precio unitario</th>
                                <th>Subtotal</th>
                                <th>Subtotal letra</th>
                                <th>Especificación</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in provisionDetalle)
                            {
                                var index = provisionDetalle.IndexOf(detalle);
                                if (index < presupuestosPedido.Count)
                                {
                                    <tr>
                                        <td>@detalle.Articulo.descripcion</td>
                                        <td>@detalle.cantidad</td>
                                        <td>@detalle.UnidadMedida.unidad</td>
                                        <td>
                                            <input type="number" @bind-value="presupuestosPedido[index].precio_unitario" @bind-value:event="oninput" @onchange="(e) => CalcularSubtotal(detalle, presupuestosPedido[index])" />
                                        </td>
                                        <td>@presupuestosPedido[index].subtotal</td>
                                        <td>@presupuestosPedido[index].subtotal_letra</td>
                                        <td><input style="width: 100%;" type="text" @bind-value="presupuestosPedido[index].especificacion" /></td>
                                        <td>
                                            @if (provisionDetalleDict[detalle])
                                            {
                                                <button type="button" class="btn btn-success" @onclick="() => AgregarInstancia(detalle)"><i class="oi oi-plus"></i></button>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-danger" @onclick="() => EliminarInstancia(detalle)"><i class="oi oi-trash"></i></button>
                                            }
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8">Error: índice fuera de rango</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <div class="btn-opciones" style="display:flex">
                        <button class="btn btn-primary" @onclick="ProcesarPresupuesto">Procesar Presupuesto</button>

                    </div>
                    <br />
                    <br />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, Required]
    public string id { get; set; }
    [Parameter, Required]
    public string prov { get; set; }

    private Dictionary<DetalleProvision, bool> provisionDetalleDict = new Dictionary<DetalleProvision, bool>();
    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private List<PresupuestoPedido> presupuestosPedido = new List<PresupuestoPedido>();
    private Proveedor proveedor = new Proveedor();
    private Pedido pedido = new Pedido();
    private Provision provision = new Provision();

    protected override async Task OnInitializedAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        pedido = await repositorioPedido.ObtenerPorId(int.Parse(id));
        proveedor = await repositorioProveedor.ObtenerPorId(int.Parse(prov));
        provision = await repositorioProvision.ObtenerPorId(pedido.provision_id);
        provisionDetalle = (await repositorioProvisionDetalle.ObtenerProvisionesId(provision.id)).ToList();

        // Inicializar el diccionario de provisionDetalle y la lista de presupuestosPedido
        provisionDetalleDict.Clear();
        presupuestosPedido.Clear();
        foreach (var detalle in provisionDetalle)
        {
            provisionDetalleDict.Add(detalle, true);
            presupuestosPedido.Add(new PresupuestoPedido
                {
                    cantidad = detalle.cantidad,
                    detalle_provision_id = detalle.id,
                    pedido_id = int.Parse(id),
                    proveedor_id = int.Parse(prov)
                });
        }
    }

    private string UpdateCantidadLetra(double subtotal)
    {
        return ConversorNumeroLetra.NumeroALetras((decimal)subtotal);
    }

    private void CalcularSubtotal(DetalleProvision dp, PresupuestoPedido pp)
    {
        if (pp.precio_unitario < 0)
        {
            JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "El precio unitario no puede ser negativo", "error");
            return;
        }

        pp.subtotal = dp.cantidad * pp.precio_unitario;
        pp.subtotal_letra = UpdateCantidadLetra(pp.subtotal);
    }

    private void AgregarInstancia(DetalleProvision dp)
    {
        var nuevaInstancia = new DetalleProvision
            {
                id = dp.id,
                Articulo = dp.Articulo,
                cantidad = dp.cantidad,
                UnidadMedida = dp.UnidadMedida,
            };
        provisionDetalle.Add(nuevaInstancia);
        presupuestosPedido.Add(new PresupuestoPedido
            {
                cantidad = dp.cantidad,
                detalle_provision_id = nuevaInstancia.id,
                pedido_id = int.Parse(id),
                proveedor_id = int.Parse(prov)
            });
        provisionDetalleDict.Add(nuevaInstancia, false);
    }

    private async Task EliminarInstancia(DetalleProvision dp)
    {
        provisionDetalle.Remove(dp);
        presupuestosPedido.RemoveAll(pp => pp.detalle_provision_id == dp.id);
        provisionDetalleDict.Remove(dp);

        // Recargar las listas y el diccionario
        await CargarDatos();
    }

    private async Task ProcesarPresupuesto()
    {
        if (presupuestosPedido.Any(pp => pp.precio_unitario <= 0))
        {
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "Todos los campos de precio unitario deben estar completos y ser mayores que cero", "error");
            return;
        }

        foreach (var pp in presupuestosPedido)
        {
            pp.subtotal = pp.precio_unitario * pp.cantidad;
            pp.subtotal_letra = UpdateCantidadLetra(pp.subtotal);
            await repositorioPresupuestoPedido.Agregar(pp);
        }

        await repositorioPresupuestoPedido.CambiarCarga(int.Parse(prov), int.Parse(id));

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El presupuesto ha sido procesado correctamente", "success");

        var url = $"/altaPresupuesto/{id}";
        NavigationManager.NavigateTo(url);
    }
}
