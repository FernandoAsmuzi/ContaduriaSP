@page "/presupuesto/{id}/{prov}"
@using ContadSP.Controllers
@using ContadSP.Repositorios
@using ContadSP.Models
@using Radzen
@using Radzen.Blazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<DetalleProvision> repositorioProvisionDetalle
@inject IRepositorio<PresupuestoPedido> repositorioPresupuestoPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                <div>
                    <h3 class="text-center">Detalle del pedido</h3>
                </div>

                @* ----DATOS DE LA PROVISION/PEDIDO--- *@
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo de pedido:</strong></label>
                        @* <label>@tipoPedido.tipo - @(procesoPedido.Pedido != null ? procesoPedido.Proceso.proceso : "Pedido es null")</label> *@
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>ID:</strong></label>
                        <label>@pedido.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha de pedido:</strong></label>
                        <label>@pedido.fecha_pedido</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>N° acta:</strong></label>
                        <label>@pedido.abreviatura-@pedido.acta_num-@pedido.anio</label>
                    </div>
                    <div class="col">
                        <label><strong>Proceso:</strong></label>
                        @* <label>@procesoPedido.proceso_completo</label> *@
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@(provision?.Destino?.destino ?? "No disponible")</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                        <label>@(provision?.Usuario?.nombre_usuario ?? "No disponible")</label>
                    </div>
                </div>
                <br />
                <div>
                    <h3 class="text-center">Detalle del proveedor</h3>
                </div>
                <div style="overflow: auto;">
                    <div class="row">
                        <div class="col">
                            <label><strong>Proveedor:</strong></label>
                            <label>@proveedor.nombre</label>
                        </div>
                        <div class="col">
                            <label><strong>Comercio:</strong></label>
                            <label>@proveedor.nombre_comercial</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>Dirección:</strong></label>
                            <label>@proveedor.direccion</label>
                        </div>
                        <div class="col">
                            <label><strong>Teléfono:</strong></label>
                            <label>@proveedor.telefono</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>Email:</strong></label>
                            <label>@proveedor.email</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div>
        </div>
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                @if (pedidoProveedor.carga)
                {
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Precio unitario</th>
                                <th>Subtotal</th>
                                <th>Subtotal letra</th>
                                <th>Especificación</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in presupuestosPedido)
                            {
                                <tr>
                                    <td>@p.DetalleProvision.Articulo.descripcion</td>
                                    <td>@p.cantidad</td>
                                    <td>@p.DetalleProvision.UnidadMedida.unidad</td>
                                    <td>@p.precio_unitario</td>
                                    <td>@p.subtotal</td>
                                    <td>@p.subtotal_letra</td>
                                    <td>@p.especificacion</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Precio unitario</th>
                                <th>Subtotal</th>
                                <th>Subtotal letra</th>
                                <th>Especificación</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var detalle in provisionDetalle)
                            {
                                var index = provisionDetalle.IndexOf(detalle);
                                if (index < presupuestosPedido.Count)
                                {
                                    <tr>
                                        <td>@detalle.Articulo.descripcion</td>
                                        <td>
                                            <input type="number" @bind-value="presupuestosPedido[index].cantidad" @bind-value:event="oninput" @onchange="(e) => CalcularSubtotal(detalle, presupuestosPedido[index])" />
                                        </td>
                                        <td>@detalle.UnidadMedida.unidad</td>
                                        <td>
                                            <input type="number" @bind-value="presupuestosPedido[index].precio_unitario" @bind-value:event="oninput" @onchange="(e) => CalcularSubtotal(detalle, presupuestosPedido[index])" />
                                        </td>
                                        <td>@presupuestosPedido[index].subtotal</td>
                                        <td>@presupuestosPedido[index].subtotal_letra</td>
                                        <td><input style="width: 100%;" type="text" @bind-value="presupuestosPedido[index].especificacion" /></td>
                                        <td>
                                            @if (provisionDetalleDict[detalle])
                                            {
                                                <button type="button" class="btn btn-success" @onclick="() => AgregarInstancia(detalle)"><i class="oi oi-plus"></i></button>
                                            }
                                            else
                                            {
                                                <button type="button" class="btn btn-danger" @onclick="() => EliminarInstancia(detalle)"><i class="oi oi-trash"></i></button>
                                            }
                                        </td>
                                    </tr>
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="8">Error: índice fuera de rango</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                    <div class="btn-opciones" style="display:flex">
                        <InputFile OnChange="OnInputFileChange" accept=".pdf" />
                        <button class="btn btn-success" @onclick="ProcesarPresupuesto">Procesar Presupuesto</button>
                    </div>
                }
                <br />
                <br />
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, Required]
    public string id { get; set; } = string.Empty;
    [Parameter, Required]
    public string prov { get; set; } = string.Empty;

    private Dictionary<DetalleProvision, bool> provisionDetalleDict = new Dictionary<DetalleProvision, bool>();
    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private List<PresupuestoPedido> presupuestosPedido = new List<PresupuestoPedido>();
    private PedidoProveedor pedidoProveedor = new PedidoProveedor();
    private Proveedor proveedor = new Proveedor();
    private Pedido pedido = new Pedido();
    private Provision provision = new Provision();
    private IBrowserFile? archivoSeleccionado;

    protected override async Task OnParametersSetAsync()
    {
        await CargarDatos();
    }

    private async Task CargarDatos()
    {
        pedido = await repositorioPedido.ObtenerPorId(int.Parse(id));
        var provId = pedido.provision_id;
        proveedor = await repositorioProveedor.ObtenerPorId(int.Parse(prov));
        provision = await repositorioProvision.ObtenerPorId(provId);
        provisionDetalle = (await repositorioProvisionDetalle.ObtenerProvisionesId(provision.id)).ToList();
        pedidoProveedor = (await repositorioPedidoProveedor.ObtenerPedidoProveedorPorPedidoYProveedor(pedido.id, proveedor.id));

        provisionDetalleDict.Clear();
        presupuestosPedido.Clear();

        if (pedidoProveedor.carga)
        {
            presupuestosPedido = (await repositorioPresupuestoPedido.ObtenerPresupuestoPedidoPorIdPedidoProveedor(pedidoProveedor.id)).ToList();
        }
        else
        {
            foreach (var detalle in provisionDetalle)
            {
                provisionDetalleDict.Add(detalle, true);
                presupuestosPedido.Add(new PresupuestoPedido
                {
                    cantidad = detalle.cantidad,
                    detalle_provision_id = detalle.id,
                    pedido_proveedor_id = pedidoProveedor.id,
                    proveedor_id = int.Parse(prov)
                });
            }
        }
    }

    private string UpdateCantidadLetra(double subtotal)
    {
        return ConversorNumeroLetra.NumeroALetras((decimal)subtotal);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        archivoSeleccionado = e.File;
        var maxAllowedSize = 10 * 1024 * 1024; // 10 MB

        if (archivoSeleccionado.Size > maxAllowedSize)
        {
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "El archivo excede el límite de tamaño", "error");
            return;
        }

        var fechaActual = DateTime.Now.ToString("ddMMyyyy");
        var carpetaDestino = Path.Combine("wwwroot", "documentacion", fechaActual);

        if (!Directory.Exists(carpetaDestino))
        {
            Directory.CreateDirectory(carpetaDestino);
        }

        var nuevoNombreArchivo = $"{pedido.abreviatura}-{pedido.acta_num}-{fechaActual}-{pedidoProveedor.Proveedor.nombre_comercial}.pdf";
        var rutaArchivo = Path.Combine(carpetaDestino, nuevoNombreArchivo);

        using (var stream = archivoSeleccionado.OpenReadStream(maxAllowedSize))
        using (var fileStream = new FileStream(rutaArchivo, FileMode.Create))
        {
            await stream.CopyToAsync(fileStream);
        }

        // Aquí puedes agregar lógica adicional después de que el archivo se haya subido correctamente.
        // Por ejemplo, podrías actualizar el estado del componente o notificar al usuario.

        //Console.WriteLine($"Archivo subido exitosamente: {archivoSeleccionado.Name}");
    }

    private void CalcularSubtotal(DetalleProvision detalle, PresupuestoPedido presupuesto)
    {
        presupuesto.subtotal = presupuesto.cantidad * presupuesto.precio_unitario;
        presupuesto.subtotal_letra = UpdateCantidadLetra(presupuesto.subtotal);
    }

    private void AgregarInstancia(DetalleProvision detalle)
    {
        provisionDetalleDict[detalle] = false;
        presupuestosPedido.Add(new PresupuestoPedido
            {
                cantidad = detalle.cantidad,
                detalle_provision_id = detalle.id,
                pedido_proveedor_id = pedidoProveedor.id,
                proveedor_id = int.Parse(prov)
            });
    }

    private void EliminarInstancia(DetalleProvision detalle)
    {
        provisionDetalleDict[detalle] = true;
        var presupuesto = presupuestosPedido.FirstOrDefault(p => p.detalle_provision_id == detalle.id);
        if (presupuesto != null)
        {
            presupuestosPedido.Remove(presupuesto);
        }
    }

    private async Task ProcesarPresupuesto()
    {
        try
        {
            if (presupuestosPedido.Any(pp => pp.precio_unitario < 0))
            {
                await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "Todos los campos de precio unitario deben ser mayores que cero", "error");
                return;
            }

            foreach (var pp in presupuestosPedido)
            {
                pp.subtotal = pp.precio_unitario * pp.cantidad;
                pp.subtotal_letra = UpdateCantidadLetra(pp.subtotal);
                pp.pedido_proveedor_id = pedidoProveedor.id;
                await repositorioPresupuestoPedido.Agregar(pp);
            }

            //await CargarDocumento();

            await repositorioPresupuestoPedido.CambiarCarga(int.Parse(prov), int.Parse(id));

            await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El presupuesto ha sido procesado correctamente", "success");

            var url = $"/altaPresupuesto/{id}";
            NavigationManager.NavigateTo(url);
        }
        catch (Exception ex)
        {
            // Manejar errores
            Console.WriteLine($"Error al procesar el presupuesto: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "Ocurrió un error al procesar el presupuesto.");
        }
    }

}


   