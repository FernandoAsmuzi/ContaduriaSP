@page "/compra/{id:int}"

@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using Radzen
@using Radzen.Blazor

@inject IRepositorio<DetalleProvision> repositorioDetalleProvision
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<ProvisionExp> repositorioProvisionExp
@inject IRepositorio<Estado> repositorioEstado
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject IRepositorio<Proceso> repositorioProceso;
@inject IRepositorio<ProcesoPedido> repositorioProcesoPedido
@inject IRepositorio<Compra> repositorioCompra
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                
                @* ----ENCABEZADO--- *@
                <div>
                    <h3 class="text-center">Detalle del pedido</h3>
                </div>
                @* ----ENCABEZADO--- *@

                @* ----DATOS DE LA PROVISION/PEDIDO--- *@
                <div class="row">
                    <div class="col">
                        <label><strong>Provisión ID:</strong></label>
                        <label>@prov.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha provisión:</strong></label>
                        <label>@prov.fecha_provision</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Descripcion:</strong></label>
                        <label>@prov.descripcion</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@destino</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                        <label>@usuario</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo pedido:</strong></label>
                        <label>@tipo</label>
                    </div>
                </div>
                <div class="row pb-3">
                    <div class="col">
                        <label><strong>Estado: </strong></label>
                        <label class="@GetEstadoCssClass(prov.estado_id)"><strong>@estado.estado</strong></label>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <label><strong>Pedido ID:</strong></label>
                        <label>@pedido.id</label>
                    </div>
                    <div class="col">
                        <label><strong>N° Actuación:</strong></label>
                        <label>@pedido.abreviatura - @pedido.acta_num - @pedido.anio </label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Fecha pedido:</strong></label>
                        <label>@pedido.fecha_pedido</label>
                    </div>
                </div>

                <div>
                    <h3 class="text-center">Artículos de la provisión</h3>
                </div>
                <div style="overflow: auto;" class="pb-3">
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Subtotal aprox.</th>
                                <th>Subtotal letra</th>
                                <th>Especificación</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in provisionDetalle)
                            {
                                <tr>
                                    <td>@p.Articulo.descripcion</td>
                                    <td>@p.cantidad</td>
                                    <td>@p.UnidadMedida.unidad</td>
                                    <td>@p.subtotal_aprox</td>
                                    <td>@p.subtotal_letra</td>
                                    <td>@p.especificacion</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total Aproximado:</strong></label>
                            <label>@prov.total_aprox</label>
                        </div>
                    </div>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total aproximado letra:</strong></label>
                            <label>@prov.total_letra</label>
                        </div>
                    </div>
                </div>

                <div class="pt-3">
                    <h3 class="text-center">Artículos seleccionados</h3>
                </div>
                <div style="overflow: auto;">

                    <table class="table table-striped table-responsive table-hover">

                        <tbody>
                            @foreach (var grupo in presupuestoPedidos.Where(pp => pp.Proveedor != null).GroupBy(pp => pp.proveedor_id))
                            {
                                <tr>
                                    <td colspan="7"><strong>Proveedor: @grupo.First().Proveedor.nombre_comercial</strong></td>
                                </tr>
                                <tr>
                                    <th>Articulo</th>
                                    <th>Cantidad</th>
                                    <th>Precio unitario</th>
                                    <th>Precio total</th>
                                    <th>Subtotal letra</th>
                                    <th>Especificación</th>
                                </tr>



                                @foreach (var pp in grupo)
                                {
                                    <tr>
                                        <td>@pp.DetalleProvision.Articulo.descripcion</td>
                                        <td>@pp.cantidad</td>
                                        <td>@pp.precio_unitario</td>
                                        <td>@pp.subtotal</td>
                                        <td>@pp.subtotal_letra</td>
                                        <td>@pp.especificacion</td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <div class="btn-opciones pb-3">
                    <button class="btn btn-success" @onclick="()=>ConfirmarCompra()">Confirmar compra</button>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();

    private List<Proveedor> proveedores = new List<Proveedor>();
    private List<Proceso> procesos = new List<Proceso>();
    private List<PedidoProveedor> pedidoProveedorList = new List<PedidoProveedor>();
    private List<PresupuestoPedido> presupuestoPedidos = new List<PresupuestoPedido>();
    private Dictionary<Proveedor, bool> proveedoresSeleccionados = new Dictionary<Proveedor, bool>();

    //diccionario articulos para el select
    private Dictionary<int, int?> productosSeleccionados = new Dictionary<int, int?>();

    private Provision prov = new Provision();
    private Estado? estado = new Estado();
    private Pedido pedido = new Pedido();
    private PedidoProveedor pedidoProveedor = new PedidoProveedor();
    private ProvisionExp exp = new ProvisionExp();
    private ProvisionExp? ultimaProvExp = new ProvisionExp();
    private Pedido ultimoPedido = new Pedido();

    private List<Estado> estados = new List<Estado>();

    private string? destino;
    private string? usuario;
    private string? tipo;


    protected override async Task OnInitializedAsync()
    {
        prov = await repositorioProvision.ObtenerProvisionPorId(Id);


        pedido = await repositorioPedido.ObteberPedidoPorProvisionId(prov.id);
        presupuestoPedidos = (await repositorioPedidoProveedor.ObtenerPresupuestoPedidoPorPedidoId(pedido.id)).Where(pp => pp.seleccion == true).ToList(); ;

        procesos = (await repositorioProceso.ObtenerTodo()).ToList();

        provisionDetalle = (await repositorioDetalleProvision.ObtenerProvisionesId(Id)).ToList();

        destino = prov.Destino.destino;
        usuario = prov.Usuario.nombre_usuario;
        tipo = prov.TipoPedido.tipo;
        await CargarEstado();
    }

    private string GetEstadoCssClass(int estadoId)
    {
        var estadoCssMap = new Dictionary<int, string>
                {
            { 1, "text-warning" },
            { 4, "text-warning" },
            { 2, "text-success" },
            { 5, "text-success" },
            { 3, "text-danger" },
            { 6, "text-danger" },
            { 7, "text-warning" },
            { 8, "text-success" }
                };

        return estadoCssMap.TryGetValue(estadoId, out var cssClass) ? cssClass : "";
    }

    private async Task CargarEstado()
    {
        estado = new Estado();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();
        estado = estados.FirstOrDefault(e => e.id == prov.estado_id);
    }

    private async Task ConfirmarCompra()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("showSweetAlertConfirm", "Confirmar Compra", "¿Estás seguro de que deseas confirmar la compra? Una vez realizada esta acción no se podrá modificar", "warning");
        if (confirmed)
        {
            var compra = new Compra();
            compra.pedido_id = pedido.id;
            await repositorioCompra.Agregar(compra);
            await repositorioPedidoProveedor.CambiarEstadoProvision(prov, 8);
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "La compra se cargó correctamente", "success");
            NavigationManager.NavigateTo("/");
        }
    }


}