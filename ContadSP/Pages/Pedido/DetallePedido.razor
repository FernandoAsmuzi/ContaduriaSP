@page "/detallePedido/{id}"

@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using DinkToPdf
@using Radzen
@using Radzen.Blazor
@using iTextSharp.text
@using iTextSharp.text.pdf
@using iTextSharp.text.pdf.draw


@inject IRepositorio<DetalleProvision> repositorioDetalleProvision
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<ProvisionExp> repositorioProvisionExp
@inject IRepositorio<Estado> repositorioEstado
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject DialogService DialogService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div class="container mt-4">
    
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                <div>
                    <h3 class="text-center">Detalle de la provisión</h3>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>ID:</strong></label>
                        <label>@prov.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha provisión:</strong></label>
                        <label>@prov.fecha_provision</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Descripcion:</strong></label>
                        <label>@prov.descripcion</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@destino</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                 
                        <label>@usuario</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo pedido:</strong></label>
                        <label>@tipo</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Estado: </strong></label>
                        @if (prov.estado_id == 1)
                        {
                            <label class="text-warning"><strong>@estado.estado</strong></label>
                            
                        }
                        else if (prov.estado_id == 2)
                        {
                            <label class="text-success"><strong>@estado.estado</strong></label>
                        }else if (prov.estado_id == 3)
                        {
                            <label class="text-danger"><strong>@estado.estado</strong></label>
                        }
                    </div>
                </div>
                <br>

                <div style="overflow: auto;">
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Subtotal aprox.</th>
                                <th>Subtotal letra</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in provisionDetalle)
                            {
                                <tr>
                                    <td>@p.Articulo.descripcion</td>
                                    <td>@p.cantidad</td>
                                    <td>@p.UnidadMedida.unidad</td>
                                    <td>@p.subtotal_aprox</td>
                                    <td>@p.subtotal_letra</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total Aproximado:</strong></label>
                            <label>@prov.total_aprox</label>
                        </div>
                    </div>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total aproximado letra:</strong></label>
                            <label>@prov.total_letra</label>
                        </div>
                    </div>
                </div>
                <br>
                @if (prov.estado_id == 1)
                {
                    <div class="btn-opciones">
                        <div class="boton-busqueda">
                            <button type="button" class="btn btn-success" @onclick="() => ControlProvision(prov, 2)">Aprobar provisión</button>
                            <button type="button" class="btn btn-danger" @onclick="() => ControlProvision(prov, 3)">Cancelar provisión</button>
                        </div>
                    </div>
                    <br>
                    <br>
                }
                else if (prov.estado_id == 2)
                {
                        <div style="overflow: auto;">
                            <h4>Proveedores Seleccionados</h4>
                            <table class="table table-striped table-responsive table-hover">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Nombre</th>
                                        <th>Comercio</th>
                                        <th>Dirección</th>
                                        <th>Teléfono</th>
                                        <th>Email</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var d in proveedoresSeleccionados)
                                    {
                                        if (d.Value)
                                        {
                                            <tr>
                                                <td>@d.Key.nombre</td>
                                                <td>@d.Key.nombre_comercial</td>
                                                <td>@d.Key.direccion</td>
                                                <td>@d.Key.telefono</td>
                                                <td>@d.Key.email</td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                        <div class="btn-opciones">
                            <div class="boton-busqueda">
                                <button type="button" class="btn btn-primary" @onclick="SeleccionarProveedores">Seleccionar proveedores</button>
                            </div>
                            <div class="boton-ver">
                                <button type="button" class="btn btn-success" @onclick="() => GenerarPedido(prov)">Generar pedido</button>
                            </div>
                            
                        </div>
                        <br />
                        <br />
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private Provision prov = new Provision();
    private List<Estado> estados = new List<Estado>();
    private Estado? estado = new Estado();
    private Pedido pedido = new Pedido();
    private PedidoProveedor pedidoProveedor = new PedidoProveedor();
    private string? destino;
    private string? usuario;
    private string? tipo;
    private List<Proveedor> proveedores = new List<Proveedor>();
    private Dictionary<Proveedor, bool> proveedoresSeleccionados = new Dictionary<Proveedor, bool>();
    private ProvisionExp exp = new ProvisionExp();
    private ProvisionExp? ultimaProvExp = new ProvisionExp();
    private int anio = 0;
    private Pedido ultimoPedido = new Pedido();

    protected override async Task OnInitializedAsync()
    {

        prov = await repositorioProvision.ObtenerProvisionPorId(int.Parse(id));
        destino = prov.Destino.destino;
        usuario = prov.Usuario.nombre_usuario;
        tipo = prov.TipoPedido.tipo;
        provisionDetalle = (await repositorioDetalleProvision.ObtenerProvisionesId(int.Parse(id))).ToList();
        await CargarEstado();
    }

    private async Task CargarEstado()
    {
        estado = new Estado();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();
        estado = estados.Where(e => e.id == prov.estado_id).FirstOrDefault();
    }

    private async Task SeleccionarProveedores()
    {
         proveedores = (await repositorioProveedor.ObtenerTodo()).ToList();

         // Inicializa el diccionario de proveedores seleccionados
         foreach (var proveedor in proveedores)
         {
             if (!proveedoresSeleccionados.ContainsKey(proveedor))
             {
                 proveedoresSeleccionados[proveedor] = false;
             }
        }

        var result = await DialogService.OpenAsync("Lista de proveedores", ds =>
             @<RadzenStack Gap="1.5rem">
                 <div class="conteiner-fluid">
                     <div style="overflow: auto;">
                         <table class="table table-striped table-responsive table-hover">
                             <thead class="thead-dark">
                                 <tr>
                                     <th>Nombre</th>
                                     <th>Nombre comercial</th>
                                     <th>Dirección</th>
                                     <th>Teléfono</th>
                                     <th>Email</th>
                                     <th>Agregar</th>
                                 </tr>
                             </thead>
                             <tbody>
                             @foreach (var p in proveedores)
                             {
                                 <tr>
                                     <td>@p.nombre</td>
                                     <td>@p.nombre_comercial</td>
                                     <td>@p.direccion</td>
                                     <td>@p.telefono</td>
                                     <td>@p.email</td>
                                     <td><RadzenCheckBox @bind-Value=@proveedoresSeleccionados[p] @onchange="e => OnProveedorSeleccionado(e, p)" /></td>
                                 </tr>
                             }
                             </tbody>
                         </table>
                     </div>
                     <div class="align-content-end">

                        <button type="button" class="btn btn-primary" @onclick="() => DialogService.Close()">
                            Aceptar
                        </button>

                    </div>
                 </div>
            
             </RadzenStack>
    ,
             new DialogOptions() { Width = "auto", Height = "auto" });
    }

    // Método para manejar el cambio de estado del checkbox
    private void OnProveedorSeleccionado(ChangeEventArgs e, Proveedor proveedor)
    {
        proveedoresSeleccionados[proveedor] = (bool)e.Value;
    }

    private async Task GenerarPedido(Provision prov)
    {
        if (!proveedoresSeleccionados.Any(p => p.Value))
        {
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "Advertencia", "Debe seleccionar al menos un proveedor.", "warning");
            return;
        }

        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        var anio = DateTime.Now.Year;

        if (ultimoPedido is null)
        {
            pedido.acta_num = 1;
        }
        else
        {
            if (CambiarAnio(ultimoPedido.anio))
            {
                pedido.acta_num = 1;
            }
            else
            {
                pedido.acta_num = ultimoPedido.acta_num + 1;
            }
        }

        pedido.anio = anio;
        pedido.provision_id = prov.id;
        await repositorioPedido.Agregar(pedido);
        await repositorioProvision.CambiarEstadoProvision(prov, 4);


        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        foreach (var p in proveedoresSeleccionados)
        {
            pedidoProveedor = new PedidoProveedor();
            if (p.Value)
            {
                pedidoProveedor.proveedor_id = p.Key.id;
                pedidoProveedor.pedido_id = ultimoPedido.id;
                await repositorioPedidoProveedor.Agregar(pedidoProveedor);
            }
        }

        // Generar el PDF
        var pdfBytes = GenerarPdf();

        await DescargarPdf(pdfBytes);
        

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El pedido se generó correctamente", "success");
        NavigationManager.NavigateTo($"/");
    }

    private byte[] GenerarPdf()
    {
        using (var ms = new MemoryStream())
        {
            var document = new iTextSharp.text.Document();
            var writer = PdfWriter.GetInstance(document, ms);
            document.Open();

            // Crear una tabla con dos celdas
            var table = new iTextSharp.text.pdf.PdfPTable(2);
            table.WidthPercentage = 100;
            
            table.SetWidths(new float[] { 2, 2 }); // Ajustar el ancho de las columnas

            // Agregar la imagen del logo a la primera celda
            var logo = iTextSharp.text.Image.GetInstance("wwwroot/icon/logoPJ.png");
            logo.ScaleToFit(200f, 200f); // Ajustar el tamaño de la imagen
            var cellLogo = new iTextSharp.text.pdf.PdfPCell(logo)
                {
             
                    Border = iTextSharp.text.Rectangle.NO_BORDER,
                    HorizontalAlignment = iTextSharp.text.Element.ALIGN_LEFT
                };
            table.AddCell(cellLogo);

            var titulo = new iTextSharp.text.Paragraph($"PEDIDO DE PROVISION N° {ultimoPedido.id}")
                {
                    Alignment = iTextSharp.text.Element.ALIGN_RIGHT
                };
            var cellTitulo = new iTextSharp.text.pdf.PdfPCell(titulo)
                {
                    Border = iTextSharp.text.Rectangle.NO_BORDER,
                    HorizontalAlignment = iTextSharp.text.Element.ALIGN_RIGHT,
                    VerticalAlignment = iTextSharp.text.Element.ALIGN_MIDDLE // Alinear verticalmente al centro
                };
            table.AddCell(cellTitulo);

            // Agregar la tabla al documento
            document.Add(table);

            var lugarFecha = new iTextSharp.text.Paragraph($"Lugar y Fecha: Poder Judicial San Pedro de Jujuy, {DateTime.Now.ToString("d 'de' MMMM 'de' yyyy")}")
                {
                    
                    IndentationLeft = 20f
                };
            document.Add(lugarFecha);

            var compraDestinada = new iTextSharp.text.Paragraph("Compra destinada a: Poder Judicial San Pedro de Jujuy")
                {
                   
                    IndentationLeft = 20f
                };
            document.Add(compraDestinada);

            var paraUtilizarEn = new iTextSharp.text.Paragraph($"Para utilizar en: {prov.Destino.destino}")
                {
                    
                    IndentationLeft = 20f
                };
            document.Add(paraUtilizarEn);

            var usuarioSolicitante = new iTextSharp.text.Paragraph($"Usuario solicitante: {prov.Usuario.nombre_usuario}")
                {
                   
                    IndentationLeft = 20f
                };
            document.Add(usuarioSolicitante);

            var descripcion = new iTextSharp.text.Paragraph($"Descripción: {prov.descripcion}")
                {
                  
                    IndentationLeft = 20f
                };
            document.Add(descripcion);

            LineSeparator line = new LineSeparator(1f, 100f, BaseColor.BLACK, Element.ALIGN_CENTER, -2);
            document.Add(new Chunk(line));

            // Crear una tabla
            var detailtable = new iTextSharp.text.pdf.PdfPTable(4);
            detailtable.WidthPercentage = 100;
            detailtable.AddCell("Renglon");
            detailtable.AddCell("Cantidad");
            detailtable.AddCell("Unidad");
            detailtable.AddCell("Artículo");
            
            int renglon = 1;
            foreach (var p in provisionDetalle)
            {
                detailtable.AddCell(renglon.ToString());
                detailtable.AddCell(p.cantidad.ToString());
                detailtable.AddCell(p.UnidadMedida.unidad);
                detailtable.AddCell(p.Articulo.descripcion);
                renglon ++;
            }

            document.Add(detailtable);

            document.Add(new iTextSharp.text.Paragraph($"Monto Aproximado: $ {prov.total_aprox}"));
            document.Add(new iTextSharp.text.Paragraph($"Total aproximado letra: {prov.total_letra}"));

            // Agregar espacios de firma
            document.Add(new Paragraph("\n\n\n")); // Espacio antes de las firmas

            // Crear una tabla para las firmas
            var firmaTable = new PdfPTable(2);
            firmaTable.WidthPercentage = 100;

            // Celda para la firma del solicitante (izquierda)
            var firmaSolicitanteCell = new PdfPCell();
            firmaSolicitanteCell.Border = Rectangle.NO_BORDER;
            firmaSolicitanteCell.HorizontalAlignment = Element.ALIGN_CENTER;
            firmaSolicitanteCell.VerticalAlignment = Element.ALIGN_MIDDLE;
            firmaSolicitanteCell.AddElement(new Paragraph("__________________________"));
            firmaSolicitanteCell.AddElement(new Paragraph("Firma Solicitante", new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL)));
           
            // Celda para el visto bueno de contaduría (derecha)
            var vistoBuenoCell = new PdfPCell();
            vistoBuenoCell.Border = Rectangle.NO_BORDER;
            vistoBuenoCell.HorizontalAlignment = Element.ALIGN_CENTER;
            vistoBuenoCell.VerticalAlignment = Element.ALIGN_MIDDLE;
            vistoBuenoCell.AddElement(new Paragraph("__________________________"));
            vistoBuenoCell.AddElement(new Paragraph("V° B° Contaduría", new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL)));
            

            // Agregar las celdas a la tabla
            firmaTable.AddCell(firmaSolicitanteCell);
            firmaTable.AddCell(vistoBuenoCell);

            // Agregar la tabla de firmas al documento
            document.Add(firmaTable);




            document.Close();
            return ms.ToArray();
        }
    }

    private async Task DescargarPdf(byte[] pdfBytes)
    {
        var base64 = Convert.ToBase64String(pdfBytes);
        var fileName = $"Pedido_{ultimoPedido.id}.pdf";
        var jsCode = $"var link = document.createElement('a'); link.href = 'data:application/pdf;base64,{base64}'; link.download = '{fileName}'; link.click();";
        await JSRuntime.InvokeVoidAsync("eval", jsCode);
        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "se descargo el pdf", "success");
    }

    // Funcion para reiniciar el N° expediente o N° actuacion cuando cambia el año


    private bool CambiarAnio(int ultima){
        anio = DateTime.Now.Year;
        bool valor = false;
        if(anio != ultima)
        {
            return true;
        }
        return valor;
    }

    // Funcion que aprueba o cancela la provision
    private async Task ControlProvision(Provision prov, int estado)
    {
        ultimaProvExp = await repositorioProvisionExp.ObtenerUltimaProvisionExp();
        anio = DateTime.Now.Year;

        if(ultimaProvExp is null)
        {
            exp.exp_num = 1;
        }
        else
        {
            if (CambiarAnio(ultimaProvExp.anio))
            {
                exp.exp_num = 1;
            }
            else
            {
                exp.exp_num = ultimaProvExp.exp_num + 1;
            }
        }
            
        exp.provision_id = prov.id;
        exp.anio = anio;
        await repositorioProvisionExp.Agregar(exp);

        await repositorioProvision.CambiarEstadoProvision(prov, estado);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "La provisión se aprobó correctamente", "success");
        NavigationManager.NavigateTo($"/");
    }
    
}
