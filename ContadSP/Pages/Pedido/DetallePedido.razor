@page "/detallePedido/{id}"

@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using DinkToPdf
@using Radzen
@using Radzen.Blazor
@using ContadSP.Services

@inject IRepositorio<DetalleProvision> repositorioDetalleProvision
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<ProvisionExp> repositorioProvisionExp
@inject IRepositorio<Estado> repositorioEstado
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject IRepositorio<Proceso> repositorioProceso;
@inject IRepositorio<ProcesoPedido> repositorioProcesoPedido
@inject IJSRuntime JSRuntime

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject PdfService PdfService


@*  ----CONTENEDORES---- *@
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                @*  ----CONTENEDORES---- *@

                @* ----ENCABEZADO--- *@
                <div>
                    @if (prov.estado_id >= 1 && prov.estado_id <= 3)
                    {
                        <h3 class="text-center">Detalle de la provisión</h3>
                    }
                    else
                    {
                        <h3 class="text-center">Detalle del pedido</h3>
                    }

                </div>
                @* ----ENCABEZADO--- *@

                @* ----DATOS DE LA PROVISION/PEDIDO--- *@
                <div class="row">
                    <div class="col">
                        <label><strong>ID:</strong></label>
                        <label>@prov.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha provisión:</strong></label>
                        <label>@prov.fecha_provision</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Descripcion:</strong></label>
                        <label>@prov.descripcion</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@destino</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                        <label>@usuario</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo pedido:</strong></label>
                        <label>@tipo</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Estado: </strong></label>
                        <label class="@GetEstadoCssClass(prov.estado_id)"><strong>@estado.estado</strong></label>
                    </div>
                </div>
                @* ----DATOS DE LA PROVISION/PEDIDO---*@
                <br>
                @* ----CANCELAR PROVISION---- *@
                @if (prov.estado_id == 1 || prov.estado_id == 3)
                {
                    @if (prov.estado_id != 3)
                    {
                        <div class="row">
                            <div class="col">
                                <RadzenCheckBox @bind-Value="prov.CancelarProvision" />
                                <label><strong>Cancelar Provisión</strong></label>
                            </div>
                        </div>
                    }
                    @if (prov.CancelarProvision == true || prov.estado_id == 3)
                    {
                        <div class="row">
                            <div class="col">
                                <label><strong>Observación de Cancelación:</strong></label>
                                <textarea @bind="prov.ObservacionCancela" class="form-control" readonly="@(prov.estado_id == 3 || !(prov.CancelarProvision ?? false))"></textarea>

                            </div>
                        </div>
                        @if (prov.estado_id == 1)
                        {
                            <div class="row">
                                <div class="col">
                                    <button type="button" class="btn btn-danger" @onclick="() => ControlProvision(prov, 3)" disabled="@string.IsNullOrEmpty(prov.ObservacionCancela)">Cancelar provisión</button>
                                </div>
                            </div>
                        }
                    }
                }



                @* ----CANCELAR PROVISION---- *@

                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@
                <div style="overflow: auto;">
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Cantidad</th>
                                <th>Unidad</th>
                                <th>Subtotal aprox.</th>
                                <th>Subtotal letra</th>
                                <th>Especificación</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in provisionDetalle)
                            {
                                <tr>
                                    <td>@p.Articulo.descripcion</td>
                                    <td>@p.cantidad</td>
                                    <td>@p.UnidadMedida.unidad</td>
                                    <td>@p.subtotal_aprox</td>
                                    <td>@p.subtotal_letra</td>
                                    <td>@p.especificacion</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total Aproximado:</strong></label>
                            <label>@prov.total_aprox</label>
                        </div>
                    </div>
                    <div class="row text-end">
                        <div class="col">
                            <label><strong>Total aproximado letra:</strong></label>
                            <label>@prov.total_letra</label>
                        </div>
                    </div>
                </div>
                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@

                <br>
                @if (prov.estado_id == 1)
                {
                    <div class="btn-opciones">
                        <div class="boton-busqueda">
                            <button type="button" class="btn btn-success" @onclick="() => ControlProvision(prov, 2)">Aprobar provisión</button>
                            @* <button type="button" class="btn btn-danger" @onclick="() => ControlProvision(prov, 3)">Cancelar provisión</button> *@
                        </div>
                    </div>
                    <br>
                    <br>
                }
                else if (prov.estado_id == 2)
                {
                    <div style="overflow: auto;">
                        <h4>Proveedores Seleccionados</h4>
                        <table class="table table-striped table-responsive table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Comercio</th>
                                    <th>Dirección</th>
                                    <th>Teléfono</th>
                                    <th>Email</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in proveedoresSeleccionados)
                                {
                                    if (d.Value)
                                    {
                                        <tr>
                                            <td>@d.Key.nombre</td>
                                            <td>@d.Key.nombre_comercial</td>
                                            <td>@d.Key.direccion</td>
                                            <td>@d.Key.telefono</td>
                                            <td>@d.Key.email</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="btn-opciones">
                        <div class="boton-busqueda">
                            <button type="button" class="btn btn-primary" @onclick="SeleccionarProveedores">Seleccionar proveedores</button>
                        </div>
                        <div class="boton-ver">
                            <button type="button" class="btn btn-success" @onclick="() => GenerarPedido(prov)">Generar pedido</button>
                        </div>

                    </div>
                    <br />
                    <br />
                }
                else if (prov.estado_id == 4)
                {
                    <div style="overflow: auto;">
                        <h4>Proveedores Seleccionados</h4>
                        <table class="table table-striped table-responsive table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Comercio</th>
                                    <th>Dirección</th>
                                    <th>Teléfono</th>
                                    <th>Email</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in pedidoProveedorList)
                                {
                                    <tr>
                                        <td>@d.Proveedor.nombre</td>
                                        <td>@d.Proveedor.nombre_comercial</td>
                                        <td>@d.Proveedor.direccion</td>
                                        <td>@d.Proveedor.telefono</td>
                                        <td>@d.Proveedor.email</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="btn-opciones">
                        <div class="boton-ver">
                            <button type="button" class="btn btn-success" @onclick="() => CargarPresupuesto(pedido)">Cargar presupuestos</button>
                        </div>
                    </div>
                    <br />
                    <br />
                }
                @*  ----CONTENEDORES---- *@
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private List<Estado> estados = new List<Estado>();
    private List<Proveedor> proveedores = new List<Proveedor>();
    private List<Proceso> procesos = new List<Proceso>();
    private List<PedidoProveedor> pedidoProveedorList = new List<PedidoProveedor>();
    private Dictionary<Proveedor, bool> proveedoresSeleccionados = new Dictionary<Proveedor, bool>();

    private Provision prov = new Provision();
    private Estado? estado = new Estado();
    private Pedido pedido = new Pedido();
    private PedidoProveedor pedidoProveedor = new PedidoProveedor();
    private ProvisionExp exp = new ProvisionExp();
    private ProvisionExp? ultimaProvExp = new ProvisionExp();
    private Pedido ultimoPedido = new Pedido();

    private string? destino;
    private string? usuario;
    private string? tipo;
    private int anio = 0;

    protected override async Task OnInitializedAsync()
    {
        prov = await repositorioProvision.ObtenerProvisionPorId(int.Parse(id));
        if (prov.estado_id == 4)
        {
            pedido = await repositorioPedido.ObteberPedidoPorProvisionId(prov.id);
            pedidoProveedorList = (await repositorioPedidoProveedor.ObtenerPedidoProveedorPorPedidoId(pedido.id)).ToList();
        }
        procesos = (await repositorioProceso.ObtenerTodo()).ToList();
        destino = prov.Destino.destino;
        usuario = prov.Usuario.nombre_usuario;
        tipo = prov.TipoPedido.tipo;
        provisionDetalle = (await repositorioDetalleProvision.ObtenerProvisionesId(int.Parse(id))).ToList();
        await CargarEstado();
    }

    private string GetEstadoCssClass(int estadoId)
    {
        var estadoCssMap = new Dictionary<int, string>
                {
            { 1, "text-warning" },
            { 4, "text-warning" },
            { 2, "text-success" },
            { 5, "text-success" },
            { 3, "text-danger" },
            { 6, "text-danger" }
                };

        return estadoCssMap.TryGetValue(estadoId, out var cssClass) ? cssClass : "";
    }

    private async Task CargarEstado()
    {
        estado = new Estado();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();
        estado = estados.FirstOrDefault(e => e.id == prov.estado_id);
    }

    private async Task SeleccionarProveedores()
    {
        proveedores = (await repositorioProveedor.ObtenerTodo()).ToList();

        foreach (var proveedor in proveedores)
        {
            if (!proveedoresSeleccionados.ContainsKey(proveedor))
            {
                proveedoresSeleccionados[proveedor] = false;
            }
        }

        var result = await DialogService.OpenAsync("Lista de proveedores", ds =>
    @<RadzenStack Gap="1.5rem">
        <div class="conteiner-fluid">
            <div style="overflow: auto;">
                <table class="table table-striped table-responsive table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Nombre</th>
                            <th>Nombre comercial</th>
                            <th>Dirección</th>
                            <th>Teléfono</th>
                            <th>Email</th>
                            <th>Agregar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in proveedores)
                    {
                        <tr>
                            <td>@p.nombre</td>
                            <td>@p.nombre_comercial</td>
                            <td>@p.direccion</td>
                            <td>@p.telefono</td>
                            <td>@p.email</td>
                            <td><RadzenCheckBox @bind-Value=@proveedoresSeleccionados[p] @onchange="e => OnProveedorSeleccionado(e, p)" /></td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div style="display: flex; justify-content: center;">
            <button type="button" class="btn btn-primary" @onclick="() => DialogService.Close()">
                Aceptar
            </button>
        </div>
    </RadzenStack>,
    new DialogOptions() { Width = "auto", Height = "auto" });
    }

    private void OnProveedorSeleccionado(ChangeEventArgs e, Proveedor proveedor)
    {
        proveedoresSeleccionados[proveedor] = (bool)e.Value;
    }

    private Proceso ObtenerProceso(int tipoId, double total)
    {
        return procesos.FirstOrDefault(tipo =>
            tipo.tipo_pedido_id == tipoId &&
            ((tipo.monto_maximo == 0 && total > tipo.monto_maximo) ||
            (total <= tipo.monto_maximo && total > tipo.monto_minimo)));
    }

    private async Task CargarProceso(Pedido p, Proceso pro)
    {
        ProcesoPedido procesoPedido = new ProcesoPedido();
        var ultimoProcesoPedido = await repositorioProcesoPedido.ObtenerUltimoProcesoNumero(pro.id);

        if (ultimoProcesoPedido is null || CambiarAnio(ultimoProcesoPedido.anio))
        {
            procesoPedido.num_proceso = 1;
            procesoPedido.proceso_completo = $"{pro.sigla}1-{DateTime.Now.Year}";
        }
        else
        {
            procesoPedido.num_proceso = ultimoProcesoPedido.num_proceso + 1;
            procesoPedido.proceso_completo = $"{pro.sigla}{ultimoProcesoPedido.num_proceso + 1}-{DateTime.Now.Year}";
        }

        procesoPedido.anio = DateTime.Now.Year;
        procesoPedido.proceso_id = pro.id;
        procesoPedido.pedido_id = p.id;
        await repositorioProcesoPedido.Agregar(procesoPedido);
    }

    private async Task GenerarPedido(Provision prov)
    {
        if (!proveedoresSeleccionados.Any(p => p.Value))
        {
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "Advertencia", "Debe seleccionar al menos un proveedor.", "warning");
            return;
        }

        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        anio = DateTime.Now.Year;

        if (ultimoPedido is null || CambiarAnio(ultimoPedido.anio))
        {
            pedido.acta_num = 1;
        }
        else
        {
            pedido.acta_num = ultimoPedido.acta_num + 1;
        }

        pedido.anio = anio;
        pedido.provision_id = prov.id;
        await repositorioPedido.Agregar(pedido);
        await repositorioProvision.CambiarEstadoProvision(prov, 4);

        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        foreach (var p in proveedoresSeleccionados.Where(p => p.Value))
        {
            pedidoProveedor = new PedidoProveedor
                {
                    proveedor_id = p.Key.id,
                    pedido_id = ultimoPedido.id
                };
            await repositorioPedidoProveedor.Agregar(pedidoProveedor);
        }

        var proceso = ObtenerProceso(prov.tipo_pedido_id, prov.total_aprox);
        await CargarProceso(ultimoPedido, proceso);

        var pdfBytes = PdfService.GenerarPdf(ultimoPedido, prov, provisionDetalle);
        await DescargarPdf(pdfBytes);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El pedido se generó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }

    private async Task DescargarPdf(byte[] pdfBytes)
    {
        var base64 = Convert.ToBase64String(pdfBytes);
        var fileName = $"Pedido_{ultimoPedido.id}.pdf";
        var jsCode = $"var link = document.createElement('a'); link.href = 'data:application/pdf;base64,{base64}'; link.download = '{fileName}'; link.click();";
        await JSRuntime.InvokeVoidAsync("eval", jsCode);
        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "se descargo el pdf", "success");
    }

    private bool CambiarAnio(int ultima)
    {
        anio = DateTime.Now.Year;
        return anio != ultima;
    }

    private async Task ControlProvision(Provision prov, int estado)
    {
        ultimaProvExp = await repositorioProvisionExp.ObtenerUltimaProvisionExp();
        anio = DateTime.Now.Year;

        if (ultimaProvExp is null || CambiarAnio(ultimaProvExp.anio))
        {
            exp.exp_num = 1;
        }
        else
        {
            exp.exp_num = ultimaProvExp.exp_num + 1;
        }

        exp.provision_id = prov.id;
        exp.anio = anio;
        await repositorioProvisionExp.Agregar(exp);
        await repositorioProvision.CambiarEstadoProvision(prov, estado);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "La provisión se aprobó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }

    private void CargarPresupuesto(Pedido p)
    {
        NavigationManager.NavigateTo($"/altaPresupuesto/{p.id}");
    }
}
