@page "/detallePedido/{id}"

@using ContadSP.Controllers
@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using DinkToPdf
@using Radzen
@using Radzen.Blazor
@using ContadSP.Services

@inject IRepositorio<DetalleProvision> repositorioDetalleProvision
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<ProvisionExp> repositorioProvisionExp
@inject IRepositorio<Estado> repositorioEstado
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject IRepositorio<Proceso> repositorioProceso;
@inject IRepositorio<ProcesoPedido> repositorioProcesoPedido
@inject IRepositorio<PresupuestoPedido> repositorioPresupuestoPedido
@inject IJSRuntime JSRuntime

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject PdfService PdfService


@*  ----CONTENEDORES---- *@
<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                @*  ----CONTENEDORES---- *@

                @* ----ENCABEZADO--- *@
                <div class="pt-3">
                    <h3 class="text-center">Detalle de la provisión</h3>
                </div>
                @* ----ENCABEZADO--- *@

                @* ----DATOS DE LA PROVISION/PEDIDO--- *@
                <div class="row">
                    <div class="col">
                        <label><strong>ID Provisión:</strong></label>
                        <label>@prov.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha provisión:</strong></label>
                        <label>@prov.fecha_provision</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Descripcion:</strong></label>
                        <label>@prov.descripcion</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@destino</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                        <label>@usuario</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo pedido:</strong></label>
                        <label>@tipo</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Estado: </strong></label>
                        <label class="@GetEstadoCssClass(prov.estado_id)"><strong>@estado.estado</strong></label>
                    </div>
                </div>
                @if (prov.estado_id > 3)
                {
                    <div class="pt-3">
                        <h3 class="text-center">Detalle del pedido</h3>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>ID Pedido:</strong></label>
                            <label>@pedido.id</label>
                        </div>
                        <div class="col">
                            <label><strong>Fecha pedido:</strong></label>
                            <label>@pedido.fecha_pedido</label>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col">
                            <label><strong>N° acta:</strong></label>
                            <label>@pedido.abreviatura-@pedido.acta_num-@pedido.anio</label>
                        </div>
                    </div>


                }

                @* ----DATOS DE LA PROVISION/PEDIDO---*@
                <br>
                @* ----CANCELAR PROVISION---- *@
                @if (prov.estado_id == 1 || prov.estado_id == 3)
                {
                    @if (prov.estado_id != 3)
                    {
                        <div class="row">
                            <div class="col">
                                <RadzenCheckBox @bind-Value="prov.CancelarProvision" />
                                <label><strong>Cancelar Provisión</strong></label>
                            </div>
                        </div>
                    }
                    @if (prov.CancelarProvision == true || prov.estado_id == 3)
                    {
                        <div class="row">
                            <div class="col">
                                <label><strong>Observación de Cancelación:</strong></label>
                                <textarea @bind="prov.ObservacionCancela" class="form-control" readonly="@(prov.estado_id == 3 || !(prov.CancelarProvision ?? false))"></textarea>

                            </div>
                        </div>
                        <br/>

                        @if (prov.estado_id == 1)
                        {
                            <div class="row">
                                <div class="col">
                                    <button type="button" class="btn btn-danger" @onclick="() => ControlProvision(prov, 3)" disabled="@string.IsNullOrEmpty(prov.ObservacionCancela)">Cancelar provisión</button>
                                </div>
                            </div>
                        }
                    }
                }
                @* ----CANCELAR PROVISION---- *@


                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@
                <div style="overflow: auto;" class="pt-3">
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Precio unitario</th>
                                <th>Unidad</th>
                                @if (prov.estado_id == 1)
                                {
                                    <th>Cantidad solicitada</th>
                                    <th>Subtotal aprox.</th>
                                    <th>Subtotal letra</th>

                                    <th>Cantidad aprobada</th>
                                    <th>Subtotal aprox</th>
                                    <th>Subtotal letra</th>
                                }
                                else
                                {
                                    <th>Cantidad</th> 
                                    <th>Subtotal aprox</th>
                                    <th>Subtotal letra</th>
                                }



                                <th>Especificación</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in provisionDetalle)
                            {
                                <tr>
                                    <td>@p.Articulo.descripcion</td>
                                    <td>@p.Articulo.monto_aprox</td>
                                    <td>@p.UnidadMedida.unidad</td>

                                    @if (prov.estado_id == 1)
                                    {
                                        <td>@p.cantidad</td>
                                        <td>@p.subtotal_aprox</td>
                                        <td>@p.subtotal_letra</td>

                                        <td>
                                            <input type="number" class="form-control" @bind="p.cantidad_aprobada" @oninput="e => CalcularSubtotal(p, p.Articulo.monto_aprox, e)"/>
                                        </td>
                                        <td>@p.subtotal_aprobado</td>
                                        <td>@p.subtotal_aprobado_letra</td>
                                    }
                                    else
                                    {
                                        <td>@p.cantidad_aprobada</td>
                                        <td>@p.subtotal_aprobado</td>
                                        <td>@p.subtotal_aprobado_letra</td>
                                    }


                                    <td>@p.especificacion</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row">
                        @if (prov.estado_id == 1)
                        {
                            <div class="col-md-6">
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <td class="text-end"><strong>Total solicitado:</strong></td>
                                            <td class="text-end">@prov.total_aprox</td>
                                        </tr>
                                        <tr>
                                            <td class="text-end"><strong>Total solicitado letra:</strong></td>
                                            <td class="text-end">@prov.total_letra</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="col-md-6">
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <td class="text-end"><strong>Total aprobado:</strong></td>
                                            <td class="text-end">@aprobado</td>
                                        </tr>
                                        <tr>
                                            <td class="text-end"><strong>Total aprobado letra:</strong></td>
                                            <td class="text-end">@aprobadoLetra</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-6">
                                <table class="table">
                                    <tbody>
                                        <tr>
                                            <td class="text-end"><strong>Total aprobado:</strong></td>
                                            <td class="text-end">@prov.total_aprox</td>
                                        </tr>
                                        <tr>
                                            <td class="text-end"><strong>Total aprobado letra:</strong></td>
                                            <td class="text-end">@prov.total_letra</td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        }

                        
                    </div>
                    
                    
                </div>
                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@

                <br>
                @if (prov.estado_id == 1)
                {
                    <div class="btn-opciones">
                        <div class="boton-busqueda">
                            <button type="button" class="btn btn-success" @onclick="() => ControlProvision(prov, 2)">Aprobar provisión</button>
                        </div>
                    </div>
                    <br>
                    <br>
                }
                else if (prov.estado_id == 2)
                {
                    <div style="overflow: auto;">
                        <h4>Proveedores Seleccionados</h4>
                        <table class="table table-striped table-responsive table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Comercio</th>
                                    <th>Dirección</th>
                                    <th>Teléfono</th>
                                    <th>Email</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in proveedoresSeleccionados)
                                {
                                    if (d.Value)
                                    {
                                        <tr>
                                            <td>@d.Key.nombre</td>
                                            <td>@d.Key.nombre_comercial</td>
                                            <td>@d.Key.direccion</td>
                                            <td>@d.Key.telefono</td>
                                            <td>@d.Key.email</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="btn-opciones pb-3">
                        <div class="boton-busqueda">
                            <button type="button" class="btn btn-primary" @onclick="SeleccionarProveedores">Seleccionar proveedores</button>
                        </div>
                        <div class="boton-ver">
                            <button type="button" class="btn btn-success" @onclick="() => GenerarPedido(prov)">Generar invitación</button>
                        </div>
                    </div>
                }
                else if (prov.estado_id == 4)
                {
                    <div style="overflow: auto;">
                        <h4>Proveedores Seleccionados</h4>
                        <table class="table table-striped table-responsive table-hover">
                            <thead class="thead-dark">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Comercio</th>
                                    <th>Dirección</th>
                                    <th>Teléfono</th>
                                    <th>Email</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var d in pedidoProveedorList)
                                {
                                    <tr>
                                        <td>@d.Proveedor.nombre</td>
                                        <td>@d.Proveedor.nombre_comercial</td>
                                        <td>@d.Proveedor.direccion</td>
                                        <td>@d.Proveedor.telefono</td>
                                        <td>@d.Proveedor.email</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                        <div class="btn-opciones">
                            <div class="boton-ver">
                                <button type="button" class="btn btn-success" @onclick="() => CargarPresupuesto(pedido)">Cargar presupuestos</button>
                            </div>
                        </div>
                    <br />
                    <br />
                }
                else if (prov.estado_id == 5)
                {
                    <div style="overflow: auto;">
                        <h4>Artículos presupuestados</h4>
                    
                        <table class="table table-striped table-responsive table-hover">
                            
                            <tbody>
                                @foreach (var grupo in presupuestoPedidos.Where(pp => pp.Proveedor != null).GroupBy(pp => pp.detalle_provision_id))
                                {
                                    
                                        <tr>
                                            <th>Articulo</th>
                                            <th>Proveedor</th>
                                            <th>Cantidad</th>
                                            <th>Precio unitario</th>
                                            <th>Precio total</th>
                                            <th>Subtotal letra</th>
                                            <th>Especificación</th>
                                            <th>Seleccionar</th>
                                            <th>Justificar selección</th>
                                        </tr>
                                    
                                    
                                           
                                    @foreach (var pp in grupo)
                                    {
                                        <tr>
                                            <td>@pp.DetalleProvision.Articulo.descripcion</td>
                                            <td>@pp.Proveedor.nombre_comercial</td>
                                            <td>@pp.cantidad</td>
                                            <td>@pp.precio_unitario</td>
                                            <td>@pp.subtotal</td>
                                            <td>@pp.subtotal_letra</td>
                                            <td>@pp.especificacion</td>
                                            <td class="align-content-center text-center">
                                                <input type="checkbox" class="presupuesto-checkbox" @onchange="e => OnProductoSeleccionado(e, pp.id)" checked="@IsProductoSeleccionado(pp.id)" />
                                            </td>
                                            
                                            <td class="align-content-center">
                                                <input type="text" class="form-control" @bind="pp.justificacion"/>
                                            </td>
                                            
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                        <div class="btn-opciones pb-4">
                            <button class="btn btn-success" @onclick="() => ConfirmarPresupuesto()">Confirmar presupuesto</button>
                        </div>
                    </div>
                    
                }
                @*  ----CONTENEDORES---- *@
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string id { get; set; }

    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private List<Estado> estados = new List<Estado>();
    private List<Proveedor> proveedores = new List<Proveedor>();
    private List<Proceso> procesos = new List<Proceso>();
    private List<PedidoProveedor> pedidoProveedorList = new List<PedidoProveedor>();
    private List<PresupuestoPedido> presupuestoPedidos = new List<PresupuestoPedido>();
    private Dictionary<Proveedor, bool> proveedoresSeleccionados = new Dictionary<Proveedor, bool>();

    //diccionario articulos para el select
    private Dictionary<int, bool> productosSeleccionados = new Dictionary<int, bool>();

    private Provision prov = new Provision();
    private Estado? estado = new Estado();
    private Pedido pedido = new Pedido();
    private PedidoProveedor pedidoProveedor = new PedidoProveedor();
    private ProvisionExp exp = new ProvisionExp();
    private ProvisionExp? ultimaProvExp = new ProvisionExp();
    private Pedido ultimoPedido = new Pedido();

    private string? destino;
    private string? usuario;
    private string? tipo;
    private int anio = 0;
    private double aprobado = 0;
    private string aprobadoLetra = "";

    protected override async Task OnInitializedAsync()
    {
        prov = await repositorioProvision.ObtenerProvisionPorId(int.Parse(id));

        if (prov.estado_id == 4)
        {   
            pedido = await repositorioPedido.ObteberPedidoPorProvisionId(prov.id);
            pedidoProveedorList = (await repositorioPedidoProveedor.ObtenerPedidoProveedorPorPedidoId(pedido.id)).ToList();
        }
        if (prov.estado_id == 5)
        {
            pedido = await repositorioPedido.ObteberPedidoPorProvisionId(prov.id);
            presupuestoPedidos = (await repositorioPresupuestoPedido.ObtenerActivos(pedido.id)).ToList();
        }
        procesos = (await repositorioProceso.ObtenerTodo()).ToList();
        destino = prov.Destino.destino;
        usuario = prov.Usuario.nombre_usuario;
        tipo = prov.TipoPedido.tipo;
        provisionDetalle = (await repositorioDetalleProvision.ObtenerProvisionesId(int.Parse(id))).ToList();
        await CargarEstado();
    }


    // Método para manejar la selección de productos
    private void OnProductoSeleccionado(ChangeEventArgs e, int presupuestoPedidoId)
    {
        if ((bool)e.Value)
        {
            // Si se selecciona, agrega el producto al diccionario
            productosSeleccionados[presupuestoPedidoId] = true;
        }
        else
        {
            // Si se deselecciona, elimina el producto del diccionario
            productosSeleccionados.Remove(presupuestoPedidoId);
        }
    }

    // Método para verificar si un producto está seleccionado
    private bool IsProductoSeleccionado(int presupuestoPedidoId)
    {
        return productosSeleccionados.ContainsKey(presupuestoPedidoId);
    }

    private async Task ConfirmarPresupuesto()
    {
        var productosConfirmados = new List<PresupuestoPedido>();

        foreach (var id in productosSeleccionados.Keys)
        {
            var producto = presupuestoPedidos.FirstOrDefault(p => p.id == id);
            if (producto != null)
            {
                productosConfirmados.Add(producto);
                await repositorioPresupuestoPedido.CambiarEstadoPresupuesto(producto.id);
            }
        }

        await repositorioProvision.CambiarEstadoProvision(prov, 7);
        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El presupuesto se cargó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }

    private string GetEstadoCssClass(int estadoId)
    {
        var estadoCssMap = new Dictionary<int, string>
                {
            { 1, "text-warning" },
            { 4, "text-warning" },
            { 2, "text-success" },
            { 5, "text-success" },
            { 3, "text-danger" },
            { 6, "text-danger" },
            { 7, "text-warning" },
            { 8, "text-success" },
            { 9, "text-success" }
                };

        return estadoCssMap.TryGetValue(estadoId, out var cssClass) ? cssClass : "";
    }

    private async Task CargarEstado()
    {
        estado = new Estado();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();
        estado = estados.FirstOrDefault(e => e.id == prov.estado_id);
    }

    private string UpdateCantidadLetra(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var num))
            return ConversorNumeroLetra.NumeroALetras(num);
        else
            return "";
    }

    private async Task CalcularSubtotal(DetalleProvision dp, double monto, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var num))
        {
            if (num < 0)
            {
                await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "La cantidad no puede ser negativa", "error");
                return;
            }
            else
            {
                dp.subtotal_aprobado = Math.Round(monto * num, 3);
                dp.subtotal_aprobado_letra = UpdateCantidadLetra(new ChangeEventArgs { Value = dp.subtotal_aprobado });

                // Actualizar el total aprobado y el total aprobado en letras
                aprobado = provisionDetalle.Sum(p => p.subtotal_aprobado);
                aprobadoLetra = UpdateCantidadLetra(new ChangeEventArgs { Value = aprobado });
            }
        }
    }

    private async Task SeleccionarProveedores()
    {
        proveedores = (await repositorioProveedor.ObtenerTodo()).ToList();

        foreach (var proveedor in proveedores)
        {
            if (!proveedoresSeleccionados.ContainsKey(proveedor))
            {
                proveedoresSeleccionados[proveedor] = false;
            }
        }

        var result = await DialogService.OpenAsync("Lista de proveedores", ds =>
    @<RadzenStack Gap="1.5rem">
        <div class="conteiner-fluid">
            <div style="overflow: auto;">
                <table class="table table-striped table-responsive table-hover">
                    <thead class="thead-dark">
                        <tr>
                            <th>Nombre</th>
                            <th>Nombre comercial</th>
                            <th>Dirección</th>
                            <th>Teléfono</th>
                            <th>Email</th>
                            <th>Agregar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in proveedores)
                    {
                        <tr>
                            <td>@p.nombre</td>
                            <td>@p.nombre_comercial</td>
                            <td>@p.direccion</td>
                            <td>@p.telefono</td>
                            <td>@p.email</td>
                            <td><RadzenCheckBox @bind-Value=@proveedoresSeleccionados[p] @onchange="e => OnProveedorSeleccionado(e, p)" /></td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
        <div style="display: flex; justify-content: center;">
            <button type="button" class="btn btn-primary" @onclick="() => DialogService.Close()">
                Aceptar
            </button>
        </div>
    </RadzenStack>
    ,
    new DialogOptions() { Width = "auto", Height = "auto" });
    }



    private void OnProveedorSeleccionado(ChangeEventArgs e, Proveedor proveedor)
    {
        proveedoresSeleccionados[proveedor] = (bool)e.Value;
    }

    private Proceso ObtenerProceso(int tipoId, double total)
    {
        var resul = new Proceso();
        foreach (var tipo in procesos) //--RECORRE LA LISTA DE TIPO MONTOS PARA CALCULAR EL CORRECTO--
        {
            if (tipo.tipo_pedido_id == tipoId)
            {
                if (tipo.monto_maximo == 0)
                {
                    if (total > tipo.monto_maximo)
                    {
                        resul = tipo;
                    }
                }
                else
                {
                    if (total <= tipo.monto_maximo && total > tipo.monto_minimo)
                    {
                        resul = tipo;
                    }
                }
            }
        }
        return resul;
    }

    private async Task CargarProceso(Pedido p, Proceso pro)
    {
        ProcesoPedido procesoPedido = new ProcesoPedido();
        var ultimoProcesoPedido = await repositorioProcesoPedido.ObtenerUltimoProcesoNumero(pro.id);

        if (ultimoProcesoPedido is null || CambiarAnio(ultimoProcesoPedido.anio))
        {
            procesoPedido.num_proceso = 1;
            procesoPedido.proceso_completo = $"{pro.sigla}1-{DateTime.Now.Year}";
        }
        else
        {
            procesoPedido.num_proceso = ultimoProcesoPedido.num_proceso + 1;
            procesoPedido.proceso_completo = $"{pro.sigla}{ultimoProcesoPedido.num_proceso + 1}-{DateTime.Now.Year}";
        }

        procesoPedido.anio = DateTime.Now.Year;
        procesoPedido.proceso_id = pro.id;
        procesoPedido.pedido_id = p.id;
        await repositorioProcesoPedido.Agregar(procesoPedido);
    }

    private async Task GenerarPedido(Provision prov)
    {
        if (!proveedoresSeleccionados.Any(p => p.Value))
        {
            await JSRuntime.InvokeVoidAsync("showSweetAlert", "Advertencia", "Debe seleccionar al menos un proveedor.", "warning");
            return;
        }

        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        anio = DateTime.Now.Year;

        if (ultimoPedido is null || CambiarAnio(ultimoPedido.anio))
        {
            pedido.acta_num = 1;
        }
        else
        {
            pedido.acta_num = ultimoPedido.acta_num + 1;
        }

        pedido.anio = anio;
        pedido.provision_id = prov.id;
        await repositorioPedido.Agregar(pedido);
        await repositorioProvision.CambiarEstadoProvision(prov, 4);

        ultimoPedido = await repositorioPedido.ObtenerUltimoPedido();
        foreach (var p in proveedoresSeleccionados.Where(p => p.Value))
        {
            pedidoProveedor = new PedidoProveedor
                {
                    proveedor_id = p.Key.id,
                    pedido_id = ultimoPedido.id
                };
            await repositorioPedidoProveedor.Agregar(pedidoProveedor);
        }

        var proceso = ObtenerProceso(prov.tipo_pedido_id, prov.total_aprox);
        if (proceso.id != 7 && proceso.id != 8)
        {
            await CargarProceso(ultimoPedido, proceso);
        }

        var pdfBytes = PdfService.GenerarPdf(ultimoPedido, prov, provisionDetalle);

        var folderPath = Path.Combine("wwwroot", "documentacion", "pedidos", DateTime.Now.ToString("dd-MM-yyyy"));
        if (!Directory.Exists(folderPath))
        {
            Directory.CreateDirectory(folderPath);
        }

        var filePath = Path.Combine(folderPath, $"Pedido_{ultimoPedido.id}.pdf");
        await File.WriteAllBytesAsync(filePath, pdfBytes);

        await DescargarPdf(pdfBytes);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "El pedido se generó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }

    private async Task DescargarPdf(byte[] pdfBytes)
    {
        var base64 = Convert.ToBase64String(pdfBytes);
        var fileName = $"Pedido_{ultimoPedido.id}.pdf";
        var jsCode = $"var link = document.createElement('a'); link.href = 'data:application/pdf;base64,{base64}'; link.download = '{fileName}'; link.click();";
        await JSRuntime.InvokeVoidAsync("eval", jsCode);
        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "se descargo el pdf", "success");
    }

    private bool CambiarAnio(int ultima)
    {
        anio = DateTime.Now.Year;
        return anio != ultima;
    }

    private async Task ControlProvision(Provision prov, int estado)
    {
        ultimaProvExp = await repositorioProvisionExp.ObtenerUltimaProvisionExp();
        anio = DateTime.Now.Year;

        if (ultimaProvExp is null || CambiarAnio(ultimaProvExp.anio))
        {
            exp.exp_num = 1;
        }
        else
        {
            exp.exp_num = ultimaProvExp.exp_num + 1;
        }

        if (estado == 2)
        {
            double totalProvision = 0;
            string totalProvisionLetra = "";
            foreach (var detalle in provisionDetalle)
            {
                detalle.cantidad_aprobada = detalle.cantidad_aprobada;
                totalProvision += detalle.subtotal_aprobado;
                await repositorioDetalleProvision.Actualizar(detalle);
            }
            totalProvisionLetra = UpdateCantidadLetra(new ChangeEventArgs { Value = totalProvision });
            prov.total_aprox = totalProvision;
            prov.total_letra = totalProvisionLetra;
            await repositorioProvision.Actualizar(prov); 
        }

        exp.provision_id = prov.id;
        exp.anio = anio;
        await repositorioProvisionExp.Agregar(exp);
        await repositorioProvision.CambiarEstadoProvision(prov, estado);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "La provisión se aprobó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }

    private void VerDetalles(Provision prov)
    {
        NavigationManager.NavigateTo($"/detallePedido/{prov.id}");
    }

    private void CargarPresupuesto(Pedido p)
    {
        NavigationManager.NavigateTo($"/altaPresupuesto/{p.id}");
    }
}
