@page "/provision/{estado}"

@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using Radzen
@using Radzen.Blazor
@inject DialogService DialogService
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<ProcesoPedido> repositorioProcesoPedido
@inject IRepositorio<Estado> repositorioEstado

@inject IJSRuntime JSRuntime

@implements IHandleAfterRender
@inject NavigationManager NavigationManager


<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                  
                    <h3 class="text-center">@titulo.estado</h3>
                </div>
                <div class="card-body">

                    @if (muestra == null)
                    {
                        <p><em>No se encontraron pedidos de provisión</em></p>
                    }
                    else
                    {

                        <div style="overflow: auto;">
                            <table class="table table-striped table-responsive table-hover">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Id</th>
                                        <th>Fecha de provision</th>
                                        <th>Descripción</th>
                                        
                                        <th>Destino</th>
                                        <th>Usuario</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var provision in muestra)
                                    {
                                        <tr>
                                            <td>@provision.id</td>
                                            <td>@provision.fecha_provision</td>
                                            <td>@provision.descripcion</td>
                                            
                                            <td>@provision.Destino.destino</td>
                                            <td>@provision.Usuario.nombre_usuario</td>
                                            <td>
                                                <a class="btn btn-success mb-2" style="margin-right: 2%" title="Ver detalle" @onclick="() => VerDetalles(provision)"><span class="oi oi-eye" aria-hidden="true"></span></a>
                                            </td>

                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public string Estado { get; set; }


    private List<Provision> provisiones = new List<Provision>();
    private List<Provision> muestra = new List<Provision>();
    private List<Pedido> pedidos = new List<Pedido>();
    private List<Estado> estados = new List<Estado>();

    private Pedido pedido = new Pedido();
    private Provision provision = new Provision();
    private ProcesoPedido procesoPedido = new ProcesoPedido();
    private Estado? titulo = new Estado();
    private int previousEstado;
    string añoActual = DateTime.Now.Year.ToString();
    private int estadoInt;

    protected override async Task OnParametersSetAsync()
    {

        provisiones = (await repositorioProvision.ObtenerProvisiones()).ToList();
        pedidos = (await repositorioPedido.ObtenerPedidos()).ToList();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();

        titulo = estados.Where(t => t.id == int.Parse(Estado)).FirstOrDefault();

        if (!int.TryParse(Estado, out estadoInt))
        {
            // Manejar el error de conversión si es necesario
            estadoInt = 0; // Valor por defecto o manejar el error de otra manera
        }

        if (previousEstado != estadoInt)
        {
            previousEstado = estadoInt;

            muestra = provisiones.Where(p => p.estado_id == estadoInt).ToList();
        }
    }

    private void CargarTitulo(int estado)
    {
        
    }

    private async Task CargarPoceso(Provision prov)
    {
      
        // procesoPedido.num_proceso = (await repositorioProcesoPedido.ObtenerUltimoProcesoNumero(prov.proceso_id)) + 1;
        // procesoPedido.proceso_id = prov.proceso_id;
        // procesoPedido.proceso_completo = prov.Proceso.sigla + "-" + añoActual;
        // await repositorioProcesoPedido.Agregar(procesoPedido);
        // procesoPedido.id = (await repositorioProcesoPedido.ObtenerUltimoProcesoPedidoId());

    }

    private async Task CargarPedido(ProcesoPedido proc, Provision prov)
    {
        // pedido.numero_acta = ((await repositorioPedido.ObtenerUltimoPedido()) + 1).ToString() + "-" + añoActual;
        // pedido.proceso_pedido_id = proc.id;
        // pedido.provision_id = prov.id;
        // pedido.estado = false;
        // await repositorioPedido.Agregar(pedido);
    }

    private void VerDetalles(Provision prov)
    {
        NavigationManager.NavigateTo($"/detallePedido/{prov.id}");
    }

    private async Task ConfirmarEntrega(Provision prov)
    {
        //await repositorioProvision.CambiarEstado(prov);
    }

}