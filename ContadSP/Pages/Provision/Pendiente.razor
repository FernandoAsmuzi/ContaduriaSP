@page "/provision_pendiente/{id}"

@using ContadSP.Controllers
@using ContadSP.Repositorios
@using ContadSP.Models
@using System.Text.Json
@using DinkToPdf
@using Radzen
@using Radzen.Blazor
@using ContadSP.Services

@inject IRepositorio<DetalleProvision> repositorioDetalleProvision
@inject IRepositorio<Provision> repositorioProvision
@inject IRepositorio<Proveedor> repositorioProveedor
@inject IRepositorio<ProvisionExp> repositorioProvisionExp
@inject IRepositorio<Estado> repositorioEstado
@inject IRepositorio<Pedido> repositorioPedido
@inject IRepositorio<PedidoProveedor> repositorioPedidoProveedor
@inject IRepositorio<Proceso> repositorioProceso;
@inject IRepositorio<ProcesoPedido> repositorioProcesoPedido
@inject IRepositorio<PresupuestoPedido> repositorioPresupuestoPedido
@inject IJSRuntime JSRuntime

@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject PdfService PdfService



<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-12 border rounded">
            <div class="conteiner-fluid">
                @*  ----CONTENEDORES---- *@

                @* ----ENCABEZADO--- *@
                <div class="pt-3">
                    <h3 class="text-center">Detalle de la provisión</h3>
                </div>
                @* ----ENCABEZADO--- *@

                @* ----DATOS DE LA PROVISION/PEDIDO--- *@
                <div class="row">
                    <div class="col">
                        <label><strong>ID Provisión:</strong></label>
                        <label>@prov.id</label>
                    </div>
                    <div class="col">
                        <label><strong>Fecha provisión:</strong></label>
                        <label>@prov.fecha_provision</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Descripcion:</strong></label>
                        <label>@prov.descripcion</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Destino:</strong></label>
                        <label>@destino</label>
                    </div>
                    <div class="col">
                        <label><strong>Usuario solicitante:</strong></label>
                        <label>@usuario</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Tipo pedido:</strong></label>
                        <label>@tipo</label>
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <label><strong>Estado: </strong></label>
                        <label class="@GetEstadoCssClass(prov.estado_id)"><strong>@estado.estado</strong></label>
                    </div>
                </div>


                @* ----DATOS DE LA PROVISION/PEDIDO---*@
                <br>
                @* ----CANCELAR PROVISION---- *@

                <div class="row">
                    <div class="col">
                        <RadzenCheckBox @bind-Value="prov.CancelarProvision" />
                        <label><strong>Cancelar Provisión</strong></label>
                    </div>
                </div>

                @if (prov.CancelarProvision == true || prov.estado_id == 3)
                {
                    <div class="row">
                        <div class="col">
                            <label><strong>Observación de Cancelación:</strong></label>
                            <textarea @bind="prov.ObservacionCancela" class="form-control" readonly="@(prov.estado_id == 3 || !(prov.CancelarProvision ?? false))"></textarea>

                        </div>
                    </div>
                    <br />


                    <div class="row">
                        <div class="col">
                            <button type="button" class="btn btn-danger" @onclick="() => ControlProvision(prov, 3)" disabled="@string.IsNullOrEmpty(prov.ObservacionCancela)">Cancelar provisión</button>
                        </div>
                    </div>

                }
                @* ----CANCELAR PROVISION---- *@


                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@
                <div style="overflow: auto;" class="pt-3">
                    <table class="table table-striped table-responsive table-hover">
                        <thead class="thead-dark">
                            <tr>
                                <th>Artículo</th>
                                <th>Precio unitario</th>
                                <th>Unidad</th>
                               
                                    <th>Cantidad solicitada</th>
                                    <th>Subtotal aprox.</th>
                                    <th>Subtotal letra</th>

                                    <th>Cantidad aprobada</th>
                                    <th>Subtotal aprox</th>
                                    <th>Subtotal letra</th>
                                
                                



                                <th>Especificación</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var p in provisionDetalle)
                            {
                                <tr>
                                    <td>@p.Articulo.descripcion</td>
                                    <td>@p.Articulo.monto_aprox</td>
                                    <td>@p.UnidadMedida.unidad</td>

                                        <td>@p.cantidad</td>
                                        <td>@p.subtotal_aprox</td>
                                        <td>@p.subtotal_letra</td>

                                        <td>
                                            <input type="number" class="form-control" @bind="p.cantidad_aprobada" @oninput="e => CalcularSubtotal(p, p.Articulo.monto_aprox, e)" />
                                        </td>
                                        <td>@p.subtotal_aprobado</td>
                                        <td>@p.subtotal_aprobado_letra</td>
                                    
                                    


                                    <td>@p.especificacion</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <div class="row">

                        <div class="col-md-6">
                            <table class="table">
                                <tbody>
                                    <tr>
                                        <td class="text-end"><strong>Total solicitado:</strong></td>
                                        <td class="text-end">@prov.total_aprox</td>
                                    </tr>
                                    <tr>
                                        <td class="text-end"><strong>Total solicitado letra:</strong></td>
                                        <td class="text-end">@prov.total_letra</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <div class="col-md-6">
                            <table class="table">
                                <tbody>
                                    <tr>
                                        <td class="text-end"><strong>Total aprobado:</strong></td>
                                        <td class="text-end">@aprobado</td>
                                    </tr>
                                    <tr>
                                        <td class="text-end"><strong>Total aprobado letra:</strong></td>
                                        <td class="text-end">@aprobadoLetra</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                @* ----ARTICULOS DE LA PROVISION/PEDIDO---- *@

                <br>

                <div class="btn-opciones">
                    <div class="boton-busqueda">
                        <button type="button" class="btn btn-success" @onclick="() => ControlProvision(prov, 2)">Aprobar provisión</button>
                    </div>
                </div>
                <br>
                <br>

                @*  ----CONTENEDORES---- *@
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string id { get; set; }

    private List<DetalleProvision> provisionDetalle = new List<DetalleProvision>();
    private List<Estado> estados = new List<Estado>();
    
    private List<Proceso> procesos = new List<Proceso>();

    private Provision prov = new Provision();
    private Estado? estado = new Estado();
    private Pedido pedido = new Pedido();
    private ProvisionExp exp = new ProvisionExp();
    private ProvisionExp? ultimaProvExp = new ProvisionExp();

    private string? destino;
    private string? usuario;
    private string? tipo;
    private int anio = 0;
    private double aprobado = 0;
    private string aprobadoLetra = "";

    protected override async Task OnInitializedAsync()
    {
        prov = await repositorioProvision.ObtenerProvisionPorId(int.Parse(id));

        procesos = (await repositorioProceso.ObtenerTodo()).ToList();
        destino = prov.Destino.destino;
        usuario = prov.Usuario.nombre_usuario;
        tipo = prov.TipoPedido.tipo;
        provisionDetalle = (await repositorioDetalleProvision.ObtenerProvisionesId(int.Parse(id))).ToList();
        await CargarEstado();

    }

    private string GetEstadoCssClass(int estadoId)
    {
        var estadoCssMap = new Dictionary<int, string>
                {
            { 1, "text-warning" },
            { 4, "text-warning" },
            { 2, "text-success" },
            { 5, "text-success" },
            { 3, "text-danger" },
            { 6, "text-danger" },
            { 7, "text-warning" },
            { 8, "text-success" },
            { 9, "text-success" }
                };

        return estadoCssMap.TryGetValue(estadoId, out var cssClass) ? cssClass : "";
    }

    private async Task CargarEstado()
    {
        estado = new Estado();
        estados = (await repositorioEstado.ObtenerTodo()).ToList();
        estado = estados.FirstOrDefault(e => e.id == prov.estado_id);
    }

    private string UpdateCantidadLetra(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value.ToString(), out var num))
            return ConversorNumeroLetra.NumeroALetras(num);
        else
            return "";
    }

    private async Task CalcularSubtotal(DetalleProvision dp, double monto, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var num))
        {
            if (num < 0)
            {
                await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Error!", "La cantidad no puede ser negativa", "error");
                return;
            }
            else
            {
                dp.subtotal_aprobado = Math.Round(monto * num, 3);
                dp.subtotal_aprobado_letra = UpdateCantidadLetra(new ChangeEventArgs { Value = dp.subtotal_aprobado });

                // Actualizar el total aprobado y el total aprobado en letras
                aprobado = provisionDetalle.Sum(p => p.subtotal_aprobado);
                aprobadoLetra = UpdateCantidadLetra(new ChangeEventArgs { Value = aprobado });
            }
        }
    }

    private bool CambiarAnio(int ultima)
    {
        anio = DateTime.Now.Year;
        return anio != ultima;
    }

    private async Task ControlProvision(Provision prov, int estado)
    {
        ultimaProvExp = await repositorioProvisionExp.ObtenerUltimaProvisionExp();
        anio = DateTime.Now.Year;

        if (ultimaProvExp is null || CambiarAnio(ultimaProvExp.anio))
        {
            exp.exp_num = 1;
        }
        else
        {
            exp.exp_num = ultimaProvExp.exp_num + 1;
        }

        if (estado == 2)
        {
            double totalProvision = 0;
            string totalProvisionLetra = "";
            foreach (var detalle in provisionDetalle)
            {
                detalle.cantidad_aprobada = detalle.cantidad_aprobada;
                totalProvision += detalle.subtotal_aprobado;
                await repositorioDetalleProvision.Actualizar(detalle);
            }
            totalProvisionLetra = UpdateCantidadLetra(new ChangeEventArgs { Value = totalProvision });
            prov.total_aprox = totalProvision;
            prov.total_letra = totalProvisionLetra;
            await repositorioProvision.Actualizar(prov);
        }

        exp.provision_id = prov.id;
        exp.anio = anio;
        await repositorioProvisionExp.Agregar(exp);
        await repositorioProvision.CambiarEstadoProvision(prov, estado);

        await JSRuntime.InvokeVoidAsync("showSweetAlert", "¡Éxito!", "La provisión se aprobó correctamente", "success");
        NavigationManager.NavigateTo("/");
    }
}
